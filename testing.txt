#unit: RETURN
E structDef?
consume(VOID) => found RETURN
#fnDef: RETURN
consume(WHILE) => found RETURN
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
consume(OR) => consumed
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
#stmCompound: ASSIGN
consume(ASSIGN) => consumed
varDef: LESS
typeBase?
consume(RETURN) => found LESS
consume(STRUCT) => found LESS
consume(TYPE-INT) => found LESS
consume(VOID) => found LESS
#stm: LESS
#stmCompound: LESS
consume(ASSIGN) => found LESS
consume(LESS) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RPAR
consume(GREATER) => found RPAR
consume(COMMA) => found RPAR
consume(SEMICOLON) => found RPAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RPAR
consume(GREATER) => found RPAR
consume(COMMA) => found RPAR
#exprMulPrim: RPAR
consume(RACC) => found RPAR
consume(LBRACKET) => found RPAR
#exprAddPrim: RPAR
consume(RBRACKET) => found RPAR
consume(END) => found RPAR
consume(RPAR) => consumed
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(NOT) => consumed
#stm: STRING
#stmCompound: STRING
consume(ASSIGN) => found STRING
consume(LESS) => found STRING
consume(NOTEQ) => found STRING
consume(STRING) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
consume(LESSEQ) => found STRING
varDef: STRING
typeBase?
consume(RETURN) => found STRING
consume(STRUCT) => found STRING
consume(TYPE-INT) => found STRING
consume(VOID) => found STRING
#stm: STRING
#stmCompound: STRING
consume(ASSIGN) => found STRING
consume(LESS) => found STRING
consume(NOTEQ) => found STRING
consume(STRING) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RACC
consume(GREATER) => found RACC
consume(COMMA) => found RACC
consume(SEMICOLON) => found RACC
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RACC
consume(GREATER) => found RACC
consume(COMMA) => found RACC
#exprMulPrim: RACC
consume(RACC) => consumed
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found END
consume(GREATER) => found END
consume(COMMA) => found END
consume(SEMICOLON) => found END
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found END
consume(GREATER) => found END
consume(COMMA) => found END
#exprMulPrim: END
consume(RACC) => found END
consume(LBRACKET) => found END
#exprAddPrim: END
consume(RBRACKET) => found END
consume(END) => consumed
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: EQUAL
typeBase?
consume(RETURN) => found EQUAL
consume(STRUCT) => found EQUAL
consume(TYPE-INT) => found EQUAL
consume(VOID) => found EQUAL
#stm: EQUAL
#stmCompound: EQUAL
consume(ASSIGN) => found EQUAL
consume(LESS) => found EQUAL
consume(NOTEQ) => found EQUAL
consume(STRING) => found EQUAL
#expr: EQUAL
#exprAssign: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
#exprOr: EQUAL
#exprAnd: EQUAL
#exprEq: EQUAL
#exprRel: EQUAL
#exprAdd: EQUAL
#exprMul: EQUAL
consume(OR) => found EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
consume(CHAR) => found EQUAL
consume(EQUAL) => consumed
E structDef?
consume(VOID) => found WHILE
#fnDef: WHILE
consume(WHILE) => consumed
consume(ID) => consumed
consume(OR) => consumed
typeBase?
consume(RETURN) => found NOT
consume(STRUCT) => found NOT
consume(TYPE-INT) => found NOT
consume(VOID) => found NOT
consume(NOT) => consumed
#stmCompound: ASSIGN
consume(ASSIGN) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: TYPE-DOUBLE
#exprAssign: TYPE-DOUBLE
consume(END) => found TYPE-DOUBLE
consume(SUB) => found TYPE-DOUBLE
#exprPostfix: TYPE-DOUBLE
consume(ID) => found TYPE-DOUBLE
consume(TYPE-CHAR) => found TYPE-DOUBLE
consume(TYPE-DOUBLE) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: TYPE-DOUBLE
#exprAnd: TYPE-DOUBLE
#exprEq: TYPE-DOUBLE
#exprRel: TYPE-DOUBLE
#exprAdd: TYPE-DOUBLE
#exprMul: TYPE-DOUBLE
consume(OR) => found TYPE-DOUBLE
consume(END) => found TYPE-DOUBLE
consume(SUB) => found TYPE-DOUBLE
#exprPostfix: TYPE-DOUBLE
consume(ID) => found TYPE-DOUBLE
consume(TYPE-CHAR) => found TYPE-DOUBLE
consume(TYPE-DOUBLE) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: TYPE-DOUBLE
#exprAssign: TYPE-DOUBLE
consume(END) => found TYPE-DOUBLE
consume(SUB) => found TYPE-DOUBLE
#exprPostfix: TYPE-DOUBLE
consume(ID) => found TYPE-DOUBLE
consume(TYPE-CHAR) => found TYPE-DOUBLE
consume(TYPE-DOUBLE) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: TYPE-DOUBLE
#exprAnd: TYPE-DOUBLE
#exprEq: TYPE-DOUBLE
#exprRel: TYPE-DOUBLE
#exprAdd: TYPE-DOUBLE
#exprMul: TYPE-DOUBLE
consume(OR) => found TYPE-DOUBLE
consume(END) => found TYPE-DOUBLE
consume(SUB) => found TYPE-DOUBLE
#exprPostfix: TYPE-DOUBLE
consume(ID) => found TYPE-DOUBLE
consume(TYPE-CHAR) => found TYPE-DOUBLE
consume(TYPE-DOUBLE) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: TYPE-CHAR
#exprAssign: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: TYPE-CHAR
#exprAnd: TYPE-CHAR
#exprEq: TYPE-CHAR
#exprRel: TYPE-CHAR
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: TYPE-CHAR
#exprAssign: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: TYPE-CHAR
#exprAnd: TYPE-CHAR
#exprEq: TYPE-CHAR
#exprRel: TYPE-CHAR
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: TYPE-CHAR
#exprAssign: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: TYPE-CHAR
#exprAnd: TYPE-CHAR
#exprEq: TYPE-CHAR
#exprRel: TYPE-CHAR
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: TYPE-CHAR
#exprAssign: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: TYPE-CHAR
#exprAnd: TYPE-CHAR
#exprEq: TYPE-CHAR
#exprRel: TYPE-CHAR
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: RETURN
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: TYPE-CHAR
#exprAnd: TYPE-CHAR
#exprEq: TYPE-CHAR
#exprRel: TYPE-CHAR
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: RETURN
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: TYPE-CHAR
#exprAnd: TYPE-CHAR
#exprEq: TYPE-CHAR
#exprRel: TYPE-CHAR
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: NOTEQ
typeBase?
consume(RETURN) => found NOTEQ
consume(STRUCT) => found NOTEQ
consume(TYPE-INT) => found NOTEQ
consume(VOID) => found NOTEQ
#stm: NOTEQ
#stmCompound: NOTEQ
consume(ASSIGN) => found NOTEQ
consume(LESS) => found NOTEQ
consume(NOTEQ) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RPAR
consume(GREATER) => found RPAR
consume(COMMA) => found RPAR
consume(SEMICOLON) => found RPAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RPAR
consume(GREATER) => found RPAR
consume(COMMA) => found RPAR
#exprMulPrim: RPAR
consume(RACC) => found RPAR
consume(LBRACKET) => found RPAR
#exprAddPrim: RPAR
consume(RBRACKET) => found RPAR
consume(END) => found RPAR
consume(RPAR) => consumed
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(NOT) => consumed
#stm: ASSIGN
#stmCompound: ASSIGN
consume(ASSIGN) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RACC
consume(GREATER) => found RACC
consume(COMMA) => found RACC
consume(SEMICOLON) => found RACC
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RACC
consume(GREATER) => found RACC
consume(COMMA) => found RACC
#exprMulPrim: RACC
consume(RACC) => consumed
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RBRACKET
consume(GREATER) => found RBRACKET
consume(COMMA) => found RBRACKET
consume(SEMICOLON) => found RBRACKET
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found RBRACKET
consume(GREATER) => found RBRACKET
consume(COMMA) => found RBRACKET
#exprMulPrim: RBRACKET
consume(RACC) => found RBRACKET
consume(LBRACKET) => found RBRACKET
#exprAddPrim: RBRACKET
consume(RBRACKET) => consumed
#exprMul: TYPE-CHAR
consume(OR) => found TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: EQUAL
typeBase?
consume(RETURN) => found EQUAL
consume(STRUCT) => found EQUAL
consume(TYPE-INT) => found EQUAL
consume(VOID) => found EQUAL
#stm: EQUAL
#stmCompound: EQUAL
consume(ASSIGN) => found EQUAL
consume(LESS) => found EQUAL
consume(NOTEQ) => found EQUAL
consume(STRING) => found EQUAL
#expr: EQUAL
#exprAssign: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
#exprOr: EQUAL
#exprAnd: EQUAL
#exprEq: EQUAL
#exprRel: EQUAL
#exprAdd: EQUAL
#exprMul: EQUAL
consume(OR) => found EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
consume(CHAR) => found EQUAL
consume(EQUAL) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
consume(OR) => found ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
consume(ID) => consumed
consume(OR) => found NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: EQUAL
typeBase?
consume(RETURN) => found EQUAL
consume(STRUCT) => found EQUAL
consume(TYPE-INT) => found EQUAL
consume(VOID) => found EQUAL
#stm: EQUAL
#stmCompound: EQUAL
consume(ASSIGN) => found EQUAL
consume(LESS) => found EQUAL
consume(NOTEQ) => found EQUAL
consume(STRING) => found EQUAL
#expr: EQUAL
#exprAssign: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
#exprOr: EQUAL
#exprAnd: EQUAL
#exprEq: EQUAL
#exprRel: EQUAL
#exprAdd: EQUAL
#exprMul: EQUAL
consume(OR) => found EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
consume(CHAR) => found EQUAL
consume(EQUAL) => consumed
E structDef?
consume(VOID) => found DOUBLE
#fnDef: DOUBLE
consume(WHILE) => found DOUBLE
typeBase?
consume(RETURN) => found DOUBLE
consume(STRUCT) => found DOUBLE
consume(TYPE-INT) => found DOUBLE
consume(VOID) => found DOUBLE
varDef: DOUBLE
typeBase?
consume(RETURN) => found DOUBLE
consume(STRUCT) => found DOUBLE
consume(TYPE-INT) => found DOUBLE
consume(VOID) => found DOUBLE
consume(DOUBLE) => consumed
0x13bf05600/0	CALL	0x13bf053e0
0x13bf053e0/1	ENTER	2
0x13bf05440/4	PUSH.f	4.9
0x13bf05400/5	CONV.f.i	// 4.9 -> 4
0x13bf05420/5	CALL_EXT	0x1009360d4
=> 4
0x13bf05460/4	PUSH.i	3
0x13bf05480/5	CALL	0x13bf05180
0x13bf05180/6	ENTER	0
0x13bf051a0/7	FPADDR	-2	// 0x10093c070
0x13bf051c0/8	LOAD.i	// *(int*)0x10093c070 -> 3
0x13bf051e0/8	PUSH.i	3
0x13bf05200/9	LESS.i	// 3<3 -> 0
0x13bf05220/8	JF	0x13bf052a0	// 0
0x13bf052a0/7	NOP
0x13bf052c0/7	FPADDR	-2	// 0x10093c070
0x13bf052e0/8	LOAD.i	// *(int*)0x10093c070 -> 3
0x13bf05300/8	FPADDR	-2	// 0x10093c070
0x13bf05320/9	LOAD.i	// *(int*)0x10093c070 -> 3
0x13bf05340/9	PUSH.i	1
0x13bf05360/10	SUB.i	// 3-1 -> 2
0x13bf05380/9	CALL	0x13bf05180
0x13bf05180/10	ENTER	0
0x13bf051a0/11	FPADDR	-2	// 0x10093c090
0x13bf051c0/12	LOAD.i	// *(int*)0x10093c090 -> 2
0x13bf051e0/12	PUSH.i	3
0x13bf05200/13	LESS.i	// 2<3 -> 1
0x13bf05220/12	JF	0x13bf052a0	// 1
0x13bf05240/11	FPADDR	-2	// 0x10093c090
0x13bf05260/12	LOAD.i	// *(int*)0x10093c090 -> 2
0x13bf05280/12	RET	1	// i:2, f:2.122e-314
0x13bf053a0/9	MUL.i	// 3*2 -> 6
0x13bf053c0/8	RET	1	// i:6, f:2.122e-314
0x13bf054a0/5	CALL_EXT	0x1009360d4
=> 6
0x13bf05580/4	FPADDR	1	// 0x10093c060
0x13bf055a0/5	PUSH.i	1
0x13bf055c0/6	STORE.i	// *(int*)0x10093c060=1
0x13bf055e0/5	DROP
0x13bf056c0/4	FPADDR	2	// 0x10093c068
0x13bf056e0/5	PUSH.i	2
0x13bf05700/6	STORE.i	// *(int*)0x10093c068=2
0x13bf05720/5	DROP
0x13bf05740/4	FPADDR	2	// 0x10093c068
0x13bf05760/5	LOAD.i	// *(int*)0x10093c068 -> 2
0x13bf05780/5	PUSH.i	5
0x13bf057a0/6	LESS.i	// 2<5 -> 1
0x13bf057c0/5	JF	0x13bf059f0	// 1
0x13bf057f0/4	FPADDR	1	// 0x10093c060
0x13bf05810/5	FPADDR	1	// 0x10093c060
0x13bf05830/6	LOAD.i	// *(int*)0x10093c060 -> 1
0x13bf05850/6	FPADDR	2	// 0x10093c068
0x13bf05870/7	LOAD.i	// *(int*)0x10093c068 -> 2
0x13bf05890/7	MUL.i	// 1*2 -> 2
0x13bf058b0/6	STORE.i	// *(int*)0x10093c060=2
0x13bf058d0/5	DROP
0x13bf058f0/4	FPADDR	2	// 0x10093c068
0x13bf05910/5	FPADDR	2	// 0x10093c068
0x13bf05930/6	LOAD.i	// *(int*)0x10093c068 -> 2
0x13bf05950/6	PUSH.i	1
0x13bf05970/7	ADD.i	// 2+1 -> 3
0x13bf05990/6	STORE.i	// *(int*)0x10093c068=3
0x13bf059b0/5	DROP
0x13bf059d0/4	JMP	0x13bf05740
0x13bf05740/4	FPADDR	2	// 0x10093c068
0x13bf05760/5	LOAD.i	// *(int*)0x10093c068 -> 3
0x13bf05780/5	PUSH.i	5
0x13bf057a0/6	LESS.i	// 3<5 -> 1
0x13bf057c0/5	JF	0x13bf059f0	// 1
0x13bf057f0/4	FPADDR	1	// 0x10093c060
0x13bf05810/5	FPADDR	1	// 0x10093c060
0x13bf05830/6	LOAD.i	// *(int*)0x10093c060 -> 2
0x13bf05850/6	FPADDR	2	// 0x10093c068
0x13bf05870/7	LOAD.i	// *(int*)0x10093c068 -> 3
0x13bf05890/7	MUL.i	// 2*3 -> 6
0x13bf058b0/6	STORE.i	// *(int*)0x10093c060=6
0x13bf058d0/5	DROP
0x13bf058f0/4	FPADDR	2	// 0x10093c068
0x13bf05910/5	FPADDR	2	// 0x10093c068
0x13bf05930/6	LOAD.i	// *(int*)0x10093c068 -> 3
0x13bf05950/6	PUSH.i	1
0x13bf05970/7	ADD.i	// 3+1 -> 4
0x13bf05990/6	STORE.i	// *(int*)0x10093c068=4
0x13bf059b0/5	DROP
0x13bf059d0/4	JMP	0x13bf05740
0x13bf05740/4	FPADDR	2	// 0x10093c068
0x13bf05760/5	LOAD.i	// *(int*)0x10093c068 -> 4
0x13bf05780/5	PUSH.i	5
0x13bf057a0/6	LESS.i	// 4<5 -> 1
0x13bf057c0/5	JF	0x13bf059f0	// 1
0x13bf057f0/4	FPADDR	1	// 0x10093c060
0x13bf05810/5	FPADDR	1	// 0x10093c060
0x13bf05830/6	LOAD.i	// *(int*)0x10093c060 -> 6
0x13bf05850/6	FPADDR	2	// 0x10093c068
0x13bf05870/7	LOAD.i	// *(int*)0x10093c068 -> 4
0x13bf05890/7	MUL.i	// 6*4 -> 24
0x13bf058b0/6	STORE.i	// *(int*)0x10093c060=24
0x13bf058d0/5	DROP
0x13bf058f0/4	FPADDR	2	// 0x10093c068
0x13bf05910/5	FPADDR	2	// 0x10093c068
0x13bf05930/6	LOAD.i	// *(int*)0x10093c068 -> 4
0x13bf05950/6	PUSH.i	1
0x13bf05970/7	ADD.i	// 4+1 -> 5
0x13bf05990/6	STORE.i	// *(int*)0x10093c068=5
0x13bf059b0/5	DROP
0x13bf059d0/4	JMP	0x13bf05740
0x13bf05740/4	FPADDR	2	// 0x10093c068
0x13bf05760/5	LOAD.i	// *(int*)0x10093c068 -> 5
0x13bf05780/5	PUSH.i	5
0x13bf057a0/6	LESS.i	// 5<5 -> 0
0x13bf057c0/5	JF	0x13bf059f0	// 0
0x13bf059f0/4	NOP
0x13bf05a50/4	FPADDR	1	// 0x10093c060
0x13bf05a10/5	LOAD.i	// *(int*)0x10093c060 -> 24
0x13bf05a30/5	CALL_EXT	0x1009360d4
=> 24
0x13bf05a70/4	RET_VOID	0
0x13bf05620/0	HALTParsing completed successfully.
