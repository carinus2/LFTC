1	TYPE_INT
1	ID:x
1	SEMICOLON
2	TYPE_CHAR
2	ID:y
2	SEMICOLON
3	TYPE_DOUBLE
3	ID:z
3	SEMICOLON
4	TYPE_DOUBLE
4	ID:p
4	LBRACKET
4	INT:100
4	RBRACKET
4	SEMICOLON
6	STRUCT
6	ID:S1
6	LACC
7	TYPE_INT
7	ID:i
7	SEMICOLON
8	TYPE_DOUBLE
8	ID:d
8	LBRACKET
8	INT:2
8	RBRACKET
8	SEMICOLON
9	TYPE_CHAR
9	ID:x
9	SEMICOLON
10	RACC
10	SEMICOLON
11	STRUCT
11	ID:S1
11	ID:p1
11	SEMICOLON
12	STRUCT
12	ID:S1
12	ID:vp
12	LBRACKET
12	INT:10
12	RBRACKET
12	SEMICOLON
14	TYPE_DOUBLE
14	ID:sum
14	LPAR
14	TYPE_DOUBLE
14	ID:x
14	LBRACKET
14	INT:5
14	RBRACKET
14	14	TYPE_INT
14	ID:n
14	RPAR
14	LACC
15	TYPE_DOUBLE
15	ID:r
15	SEMICOLON
16	TYPE_INT
16	ID:i
16	SEMICOLON
17	ID:r
17	ASSIGN
17	INT:0
17	SEMICOLON
18	ID:i
18	ASSIGN
18	INT:0
18	SEMICOLON
19	WHILE
19	LPAR
19	ID:i
19	LESS
19	ID:n
19	RPAR
19	LACC
20	TYPE_DOUBLE
20	ID:n
20	SEMICOLON
21	ID:n
21	ASSIGN
21	ID:x
21	LBRACKET
21	ID:i
21	RBRACKET
21	SEMICOLON
22	ID:r
22	ASSIGN
22	ID:r
22	ADD
22	ID:n
22	SEMICOLON
23	ID:i
23	ASSIGN
23	ID:i
23	ADD
23	INT:1
23	SEMICOLON
24	RACC
25	RETURN
25	ID:r
25	SEMICOLON
26	RACC
28	VOID
28	ID:f
28	LPAR
28	STRUCT
28	ID:S1
28	ID:p
28	RPAR
28	LACC
29	ID:puti
29	LPAR
29	ID:p
29	DOT
29	ID:i
29	RPAR
29	SEMICOLON
30	RACC
31	END
#unit: RETURN
E structDef?
consume(VOID) => found RETURN
#fnDef: RETURN
consume(WHILE) => found RETURN
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
consume(OR) => found CHAR
varDef: RETURN
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
E structDef?
consume(VOID) => found TYPE-INT
#fnDef: TYPE-INT
consume(WHILE) => found TYPE-INT
typeBase?
consume(RETURN) => found TYPE-INT
consume(STRUCT) => found TYPE-INT
consume(TYPE-INT) => consumed
consume(ID) => consumed
consume(OR) => found CHAR
varDef: TYPE-INT
typeBase?
consume(RETURN) => found TYPE-INT
consume(STRUCT) => found TYPE-INT
consume(TYPE-INT) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
E structDef?
consume(VOID) => found STRUCT
#fnDef: STRUCT
consume(WHILE) => found STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
consume(OR) => found CHAR
varDef: STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
E structDef?
consume(VOID) => found STRUCT
#fnDef: STRUCT
consume(WHILE) => found STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
consume(OR) => found GREATER
varDef: STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => consumed
consume(TYPE-CHAR) => consumed
consume(GREATEREQ) => consumed
consume(CHAR) => consumed
E structDef?
consume(VOID) => consumed
consume(ID) => consumed
consume(ASSIGN) => consumed
varDef: RETURN
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
varDef: STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => consumed
consume(TYPE-CHAR) => consumed
consume(GREATEREQ) => consumed
consume(CHAR) => consumed
varDef: TYPE-INT
typeBase?
consume(RETURN) => found TYPE-INT
consume(STRUCT) => found TYPE-INT
consume(TYPE-INT) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
varDef: EQUAL
typeBase?
consume(RETURN) => found EQUAL
consume(STRUCT) => found EQUAL
consume(TYPE-INT) => found EQUAL
consume(VOID) => found EQUAL
consume(EQUAL) => consumed
consume(CHAR) => consumed
E structDef?
consume(VOID) => consumed
consume(ID) => consumed
consume(ASSIGN) => found ID
#fnDef: VOID
consume(WHILE) => found VOID
typeBase?
consume(RETURN) => found VOID
consume(STRUCT) => found VOID
consume(TYPE-INT) => found VOID
consume(VOID) => consumed
consume(ID) => consumed
consume(ID) => consumed
consume(OR) => found CHAR
varDef: VOID
typeBase?
consume(RETURN) => found VOID
consume(STRUCT) => found VOID
consume(TYPE-INT) => found VOID
consume(VOID) => consumed
consume(ID) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
E structDef?
consume(VOID) => consumed
consume(ID) => consumed
consume(ASSIGN) => found ID
#fnDef: VOID
consume(WHILE) => found VOID
typeBase?
consume(RETURN) => found VOID
consume(STRUCT) => found VOID
consume(TYPE-INT) => found VOID
consume(VOID) => consumed
consume(ID) => consumed
consume(ID) => consumed
consume(OR) => found GREATER
varDef: VOID
typeBase?
consume(RETURN) => found VOID
consume(STRUCT) => found VOID
consume(TYPE-INT) => found VOID
consume(VOID) => consumed
consume(ID) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => consumed
consume(TYPE-CHAR) => consumed
consume(GREATEREQ) => consumed
consume(CHAR) => consumed
E structDef?
consume(VOID) => found STRUCT
#fnDef: STRUCT
consume(WHILE) => found STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
consume(OR) => consumed
#fnParam: STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => consumed
consume(TYPE-CHAR) => consumed
consume(GREATEREQ) => consumed
consume(INT) => consumed
#fnParam: RETURN
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
#stmCompound: ASSIGN
consume(ASSIGN) => consumed
varDef: STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
varDef: RETURN
typeBase?
consume(RETURN) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
#exprPostfixPrim: SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: TYPE-CHAR
#exprUnary: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
#exprPrimary TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: TYPE-CHAR
#exprAnd: TYPE-CHAR
#exprEq: TYPE-CHAR
#exprRel: TYPE-CHAR
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
#exprCast: TYPE-CHAR
consume(OR) => found TYPE-CHAR
#exprUnary: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
#exprPrimary TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
#exprRelPrim: CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
#exprPostfixPrim: SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: TYPE-CHAR
#exprUnary: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
#exprPrimary TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: TYPE-CHAR
#exprAnd: TYPE-CHAR
#exprEq: TYPE-CHAR
#exprRel: TYPE-CHAR
#exprAdd: TYPE-CHAR
#exprMul: TYPE-CHAR
#exprCast: TYPE-CHAR
consume(OR) => found TYPE-CHAR
#exprUnary: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
#exprPrimary TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
#exprRelPrim: CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: NOTEQ
typeBase?
consume(RETURN) => found NOTEQ
consume(STRUCT) => found NOTEQ
consume(TYPE-INT) => found NOTEQ
consume(VOID) => found NOTEQ
#stm: NOTEQ
#stmCompound: NOTEQ
consume(ASSIGN) => found NOTEQ
consume(LESS) => found NOTEQ
consume(NOTEQ) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found RPAR
#exprPostfixPrim: RPAR
consume(GREATER) => found RPAR
consume(COMMA) => found RPAR
consume(SEMICOLON) => found RPAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found RPAR
#exprPostfixPrim: RPAR
consume(GREATER) => found RPAR
consume(COMMA) => found RPAR
#exprMulPrim: RPAR
consume(RACC) => found RPAR
consume(LBRACKET) => found RPAR
#exprAddPrim: RPAR
consume(RBRACKET) => found RPAR
consume(END) => found RPAR
#exprRelPrim: RPAR
consume(RPAR) => consumed
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found NOT
#exprPostfixPrim: NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
#exprRelPrim: NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(NOT) => consumed
#stm: ASSIGN
#stmCompound: ASSIGN
consume(ASSIGN) => consumed
varDef: STRUCT
typeBase?
consume(RETURN) => found STRUCT
consume(STRUCT) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
#exprPostfixPrim: SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found GREATER
#exprPostfixPrim: GREATER
consume(GREATER) => consumed
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found GREATEREQ
#exprPostfixPrim: GREATEREQ
consume(GREATER) => found GREATEREQ
consume(COMMA) => found GREATEREQ
consume(SEMICOLON) => found GREATEREQ
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found GREATEREQ
#exprPostfixPrim: GREATEREQ
consume(GREATER) => found GREATEREQ
consume(COMMA) => found GREATEREQ
#exprMulPrim: GREATEREQ
consume(RACC) => found GREATEREQ
consume(LBRACKET) => found GREATEREQ
#exprAddPrim: GREATEREQ
consume(RBRACKET) => found GREATEREQ
consume(END) => found GREATEREQ
#exprRelPrim: GREATEREQ
consume(RPAR) => found GREATEREQ
consume(DIV) => found GREATEREQ
consume(DOT) => found GREATEREQ
consume(AND) => found GREATEREQ
#exprEqPrim: GREATEREQ
consume(LPAR) => found GREATEREQ
consume(MUL) => found GREATEREQ
#exprAndPrim: GREATEREQ
consume(LACC) => found GREATEREQ
#exprOrPrim: GREATEREQ
consume(ADD) => found GREATEREQ
consume(GREATEREQ) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found GREATER
#exprPostfixPrim: GREATER
consume(GREATER) => consumed
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found GREATEREQ
#exprPostfixPrim: GREATEREQ
consume(GREATER) => found GREATEREQ
consume(COMMA) => found GREATEREQ
consume(SEMICOLON) => found GREATEREQ
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found GREATEREQ
#exprPostfixPrim: GREATEREQ
consume(GREATER) => found GREATEREQ
consume(COMMA) => found GREATEREQ
#exprMulPrim: GREATEREQ
consume(RACC) => found GREATEREQ
consume(LBRACKET) => found GREATEREQ
#exprAddPrim: GREATEREQ
consume(RBRACKET) => found GREATEREQ
consume(END) => found GREATEREQ
#exprRelPrim: GREATEREQ
consume(RPAR) => found GREATEREQ
consume(DIV) => found GREATEREQ
consume(DOT) => found GREATEREQ
consume(AND) => found GREATEREQ
#exprEqPrim: GREATEREQ
consume(LPAR) => found GREATEREQ
consume(MUL) => found GREATEREQ
#exprAndPrim: GREATEREQ
consume(LACC) => found GREATEREQ
#exprOrPrim: GREATEREQ
consume(ADD) => found GREATEREQ
consume(GREATEREQ) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
#exprRelPrim: CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
#exprPostfixPrim: SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found RBRACKET
#exprPostfixPrim: RBRACKET
consume(GREATER) => found RBRACKET
consume(COMMA) => found RBRACKET
consume(SEMICOLON) => found RBRACKET
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found RBRACKET
#exprPostfixPrim: RBRACKET
consume(GREATER) => found RBRACKET
consume(COMMA) => found RBRACKET
#exprMulPrim: RBRACKET
consume(RACC) => found RBRACKET
consume(LBRACKET) => found RBRACKET
#exprAddPrim: RBRACKET
consume(RBRACKET) => consumed
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found CHAR
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
#exprRelPrim: CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found SEMICOLON
#exprPostfixPrim: SEMICOLON
consume(GREATER) => found SEMICOLON
consume(COMMA) => found SEMICOLON
consume(SEMICOLON) => consumed
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found RBRACKET
#exprPostfixPrim: RBRACKET
consume(GREATER) => found RBRACKET
consume(COMMA) => found RBRACKET
consume(SEMICOLON) => found RBRACKET
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found RBRACKET
#exprPostfixPrim: RBRACKET
consume(GREATER) => found RBRACKET
consume(COMMA) => found RBRACKET
#exprMulPrim: RBRACKET
consume(RACC) => found RBRACKET
consume(LBRACKET) => found RBRACKET
#exprAddPrim: RBRACKET
consume(RBRACKET) => consumed
#exprMul: TYPE-CHAR
#exprCast: TYPE-CHAR
consume(OR) => found TYPE-CHAR
#exprUnary: TYPE-CHAR
consume(END) => found TYPE-CHAR
consume(SUB) => found TYPE-CHAR
#exprPostfix: TYPE-CHAR
#exprPrimary TYPE-CHAR
consume(ID) => found TYPE-CHAR
consume(TYPE-CHAR) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
#exprRelPrim: CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: EQUAL
typeBase?
consume(RETURN) => found EQUAL
consume(STRUCT) => found EQUAL
consume(TYPE-INT) => found EQUAL
consume(VOID) => found EQUAL
#stm: EQUAL
#stmCompound: EQUAL
consume(ASSIGN) => found EQUAL
consume(LESS) => found EQUAL
consume(NOTEQ) => found EQUAL
consume(STRING) => found EQUAL
#expr: EQUAL
#exprAssign: EQUAL
#exprUnary: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
#exprPrimary EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
#exprOr: EQUAL
#exprAnd: EQUAL
#exprEq: EQUAL
#exprRel: EQUAL
#exprAdd: EQUAL
#exprMul: EQUAL
#exprCast: EQUAL
consume(OR) => found EQUAL
#exprUnary: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
#exprPrimary EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
consume(CHAR) => found EQUAL
consume(EQUAL) => consumed
varDef: STRING
typeBase?
consume(RETURN) => found STRING
consume(STRUCT) => found STRING
consume(TYPE-INT) => found STRING
consume(VOID) => found STRING
#stm: STRING
#stmCompound: STRING
consume(ASSIGN) => found STRING
consume(LESS) => found STRING
consume(NOTEQ) => found STRING
consume(STRING) => consumed
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found CHAR
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found CHAR
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
#exprRelPrim: CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: EQUAL
typeBase?
consume(RETURN) => found EQUAL
consume(STRUCT) => found EQUAL
consume(TYPE-INT) => found EQUAL
consume(VOID) => found EQUAL
#stm: EQUAL
#stmCompound: EQUAL
consume(ASSIGN) => found EQUAL
consume(LESS) => found EQUAL
consume(NOTEQ) => found EQUAL
consume(STRING) => found EQUAL
#expr: EQUAL
#exprAssign: EQUAL
#exprUnary: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
#exprPrimary EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
#exprOr: EQUAL
#exprAnd: EQUAL
#exprEq: EQUAL
#exprRel: EQUAL
#exprAdd: EQUAL
#exprMul: EQUAL
#exprCast: EQUAL
consume(OR) => found EQUAL
#exprUnary: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
#exprPrimary EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
consume(CHAR) => found EQUAL
consume(EQUAL) => consumed
E structDef?
consume(VOID) => found WHILE
#fnDef: WHILE
consume(WHILE) => consumed
consume(ID) => consumed
consume(OR) => consumed
#fnParam: VOID
typeBase?
consume(RETURN) => found VOID
consume(STRUCT) => found VOID
consume(TYPE-INT) => found VOID
consume(VOID) => consumed
consume(ID) => consumed
consume(ID) => consumed
arrayDecl?
consume(GREATER) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
#stmCompound: ASSIGN
consume(ASSIGN) => consumed
varDef: ID
typeBase?
consume(RETURN) => found ID
consume(STRUCT) => found ID
consume(TYPE-INT) => found ID
consume(VOID) => found ID
#stm: ID
#stmCompound: ID
consume(ASSIGN) => found ID
consume(LESS) => found ID
consume(NOTEQ) => found ID
consume(STRING) => found ID
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found COMMA
#exprPostfixPrim: COMMA
consume(GREATER) => found COMMA
consume(COMMA) => consumed
consume(ID) => consumed
#exprPostfixPrim: NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found COMMA
#exprPostfixPrim: COMMA
consume(GREATER) => found COMMA
consume(COMMA) => consumed
consume(ID) => consumed
#exprPostfixPrim: NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
#exprRelPrim: NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
consume(SEMICOLON) => found CHAR
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => consumed
#expr: ID
#exprAssign: ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found COMMA
#exprPostfixPrim: COMMA
consume(GREATER) => found COMMA
consume(COMMA) => consumed
consume(ID) => consumed
#exprPostfixPrim: NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
consume(SEMICOLON) => found NOT
#exprOr: ID
#exprAnd: ID
#exprEq: ID
#exprRel: ID
#exprAdd: ID
#exprMul: ID
#exprCast: ID
consume(OR) => found ID
#exprUnary: ID
consume(END) => found ID
consume(SUB) => found ID
#exprPostfix: ID
#exprPrimary ID
consume(ID) => consumed
consume(OR) => found COMMA
#exprPostfixPrim: COMMA
consume(GREATER) => found COMMA
consume(COMMA) => consumed
consume(ID) => consumed
#exprPostfixPrim: NOT
consume(GREATER) => found NOT
consume(COMMA) => found NOT
#exprMulPrim: NOT
consume(RACC) => found NOT
consume(LBRACKET) => found NOT
#exprAddPrim: NOT
consume(RBRACKET) => found NOT
consume(END) => found NOT
#exprRelPrim: NOT
consume(RPAR) => found NOT
consume(DIV) => found NOT
consume(DOT) => found NOT
consume(AND) => found NOT
#exprEqPrim: NOT
consume(LPAR) => found NOT
consume(MUL) => found NOT
#exprAndPrim: NOT
consume(LACC) => found NOT
#exprOrPrim: NOT
consume(ADD) => found NOT
consume(INT) => found NOT
consume(NOT) => consumed
#exprPostfixPrim: CHAR
consume(GREATER) => found CHAR
consume(COMMA) => found CHAR
#exprMulPrim: CHAR
consume(RACC) => found CHAR
consume(LBRACKET) => found CHAR
#exprAddPrim: CHAR
consume(RBRACKET) => found CHAR
consume(END) => found CHAR
#exprRelPrim: CHAR
consume(RPAR) => found CHAR
consume(DIV) => found CHAR
consume(DOT) => found CHAR
consume(AND) => found CHAR
#exprEqPrim: CHAR
consume(LPAR) => found CHAR
consume(MUL) => found CHAR
#exprAndPrim: CHAR
consume(LACC) => found CHAR
#exprOrPrim: CHAR
consume(ADD) => found CHAR
consume(CHAR) => consumed
varDef: EQUAL
typeBase?
consume(RETURN) => found EQUAL
consume(STRUCT) => found EQUAL
consume(TYPE-INT) => found EQUAL
consume(VOID) => found EQUAL
#stm: EQUAL
#stmCompound: EQUAL
consume(ASSIGN) => found EQUAL
consume(LESS) => found EQUAL
consume(NOTEQ) => found EQUAL
consume(STRING) => found EQUAL
#expr: EQUAL
#exprAssign: EQUAL
#exprUnary: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
#exprPrimary EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
#exprOr: EQUAL
#exprAnd: EQUAL
#exprEq: EQUAL
#exprRel: EQUAL
#exprAdd: EQUAL
#exprMul: EQUAL
#exprCast: EQUAL
consume(OR) => found EQUAL
#exprUnary: EQUAL
consume(END) => found EQUAL
consume(SUB) => found EQUAL
#exprPostfix: EQUAL
#exprPrimary EQUAL
consume(ID) => found EQUAL
consume(TYPE-CHAR) => found EQUAL
consume(TYPE-DOUBLE) => found EQUAL
consume(IF) => found EQUAL
consume(ELSE) => found EQUAL
consume(OR) => found EQUAL
consume(CHAR) => found EQUAL
consume(EQUAL) => consumed
E structDef?
consume(VOID) => found DOUBLE
#fnDef: DOUBLE
consume(WHILE) => found DOUBLE
typeBase?
consume(RETURN) => found DOUBLE
consume(STRUCT) => found DOUBLE
consume(TYPE-INT) => found DOUBLE
consume(VOID) => found DOUBLE
varDef: DOUBLE
typeBase?
consume(RETURN) => found DOUBLE
consume(STRUCT) => found DOUBLE
consume(TYPE-INT) => found DOUBLE
consume(VOID) => found DOUBLE
consume(DOUBLE) => consumed
// domain: global
int x;	// size=4, mem=0x141f05550
char y;	// size=1, mem=0x141f055b0
double z;	// size=8, mem=0x1430040d0
double p[100];	// size=800, mem=0x143004130
struct S1{
	int i;	// size=4, idx=0
	double d[2];	// size=16, idx=4
	char x;	// size=1, idx=20
	};	// size=21
struct S1 p1;	// size=21, mem=0x143004550
struct S1 vp[10];	// size=210, mem=0x143004690
double sum(int n /*size=4, idx=0*/){
	double r;	// size=8, idx=0
	int i;	// size=4, idx=1
	double n;	// size=8, idx=2
	}
void f(struct S1 p /*size=21, idx=0*/){
	}


Parsing completed successfully.
